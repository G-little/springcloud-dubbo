<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.little.g.springcloud.pay.mapper.UserAccountMapper">
  <resultMap id="BaseResultMap" type="com.little.g.springcloud.pay.model.UserAccount">
    <id column="uid" jdbcType="BIGINT" property="uid" />
    <result column="money" jdbcType="BIGINT" property="money" />
    <result column="frozon_money" jdbcType="BIGINT" property="frozonMoney" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `uid`, money, frozon_money, `status`, update_time, create_time
  </sql>
  <select id="selectByExample" parameterType="com.little.g.springcloud.pay.model.UserAccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_account
    where `uid` = #{uid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_account
    where `uid` = #{uid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.little.g.springcloud.pay.model.UserAccountExample">
    delete from user_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.little.g.springcloud.pay.model.UserAccount">
    insert into user_account (`uid`, money, frozon_money, 
      `status`, update_time, create_time
      )
    values (#{uid,jdbcType=BIGINT}, #{money,jdbcType=BIGINT}, #{frozonMoney,jdbcType=BIGINT}, 
      #{status,jdbcType=TINYINT}, #{updateTime,jdbcType=BIGINT}, #{createTime,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.little.g.springcloud.pay.model.UserAccount">
    insert into user_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        `uid`,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="frozonMoney != null">
        frozon_money,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="money != null">
        #{money,jdbcType=BIGINT},
      </if>
      <if test="frozonMoney != null">
        #{frozonMoney,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.little.g.springcloud.pay.model.UserAccountExample" resultType="java.lang.Long">
    select count(*) from user_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_account
    <set>
      <if test="record.uid != null">
        `uid` = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=BIGINT},
      </if>
      <if test="record.frozonMoney != null">
        frozon_money = #{record.frozonMoney,jdbcType=BIGINT},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_account
    set `uid` = #{record.uid,jdbcType=BIGINT},
      money = #{record.money,jdbcType=BIGINT},
      frozon_money = #{record.frozonMoney,jdbcType=BIGINT},
      `status` = #{record.status,jdbcType=TINYINT},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.little.g.springcloud.pay.model.UserAccount">
    update user_account
    <set>
      <if test="money != null">
        money = #{money,jdbcType=BIGINT},
      </if>
      <if test="frozonMoney != null">
        frozon_money = #{frozonMoney,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
    </set>
    where `uid` = #{uid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.little.g.springcloud.pay.model.UserAccount">
    update user_account
    set money = #{money,jdbcType=BIGINT},
      frozon_money = #{frozonMoney,jdbcType=BIGINT},
      `status` = #{status,jdbcType=TINYINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=BIGINT}
    where `uid` = #{uid,jdbcType=BIGINT}
  </update>
</mapper>