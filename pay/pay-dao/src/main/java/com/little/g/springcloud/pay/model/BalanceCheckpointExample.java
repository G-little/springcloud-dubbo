package com.little.g.springcloud.pay.model;

import java.util.ArrayList;
import java.util.List;

public class BalanceCheckpointExample {

	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	protected String orderByClause;

	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	protected boolean distinct;

	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public BalanceCheckpointExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public boolean isDistinct() {
		return distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public BalanceCheckpointExample orderBy(String orderByClause) {
		this.setOrderByClause(orderByClause);
		return this;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public BalanceCheckpointExample orderBy(String... orderByClauses) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < orderByClauses.length; i++) {
			sb.append(orderByClauses[i]);
			if (i < orderByClauses.length - 1) {
				sb.append(" , ");
			}
		}
		this.setOrderByClause(sb.toString());
		return this;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria(this);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public static Criteria newAndCreateCriteria() {
		BalanceCheckpointExample example = new BalanceCheckpointExample();
		return example.createCriteria();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public BalanceCheckpointExample when(boolean condition, IExampleWhen then) {
		if (condition) {
			then.example(this);
		}
		return this;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public BalanceCheckpointExample when(boolean condition, IExampleWhen then,
			IExampleWhen otherwise) {
		if (condition) {
			then.example(this);
		}
		else {
			otherwise.example(this);
		}
		return this;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	protected abstract static class GeneratedCriteria {

		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1, Object value2,
				String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException(
						"Between values for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return (Criteria) this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return (Criteria) this;
		}

		public Criteria andIdEqualTo(Long value) {
			addCriterion("id =", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("id = ").append(column.getEscapedColumnName())
					.toString());
			return (Criteria) this;
		}

		public Criteria andIdNotEqualTo(Long value) {
			addCriterion("id <>", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("id <> ").append(column.getEscapedColumnName())
					.toString());
			return (Criteria) this;
		}

		public Criteria andIdGreaterThan(Long value) {
			addCriterion("id >", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdGreaterThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("id > ").append(column.getEscapedColumnName())
					.toString());
			return (Criteria) this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Long value) {
			addCriterion("id >=", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdGreaterThanOrEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("id >= ").append(column.getEscapedColumnName())
					.toString());
			return (Criteria) this;
		}

		public Criteria andIdLessThan(Long value) {
			addCriterion("id <", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdLessThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("id < ").append(column.getEscapedColumnName())
					.toString());
			return (Criteria) this;
		}

		public Criteria andIdLessThanOrEqualTo(Long value) {
			addCriterion("id <=", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdLessThanOrEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("id <= ").append(column.getEscapedColumnName())
					.toString());
			return (Criteria) this;
		}

		public Criteria andIdIn(List<Long> values) {
			addCriterion("id in", values, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotIn(List<Long> values) {
			addCriterion("id not in", values, "id");
			return (Criteria) this;
		}

		public Criteria andIdBetween(Long value1, Long value2) {
			addCriterion("id between", value1, value2, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotBetween(Long value1, Long value2) {
			addCriterion("id not between", value1, value2, "id");
			return (Criteria) this;
		}

		public Criteria andUidIsNull() {
			addCriterion("`uid` is null");
			return (Criteria) this;
		}

		public Criteria andUidIsNotNull() {
			addCriterion("`uid` is not null");
			return (Criteria) this;
		}

		public Criteria andUidEqualTo(Integer value) {
			addCriterion("`uid` =", value, "uid");
			return (Criteria) this;
		}

		public Criteria andUidEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("`uid` = ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUidNotEqualTo(Integer value) {
			addCriterion("`uid` <>", value, "uid");
			return (Criteria) this;
		}

		public Criteria andUidNotEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("`uid` <> ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUidGreaterThan(Integer value) {
			addCriterion("`uid` >", value, "uid");
			return (Criteria) this;
		}

		public Criteria andUidGreaterThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("`uid` > ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUidGreaterThanOrEqualTo(Integer value) {
			addCriterion("`uid` >=", value, "uid");
			return (Criteria) this;
		}

		public Criteria andUidGreaterThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("`uid` >= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUidLessThan(Integer value) {
			addCriterion("`uid` <", value, "uid");
			return (Criteria) this;
		}

		public Criteria andUidLessThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("`uid` < ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUidLessThanOrEqualTo(Integer value) {
			addCriterion("`uid` <=", value, "uid");
			return (Criteria) this;
		}

		public Criteria andUidLessThanOrEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("`uid` <= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUidIn(List<Integer> values) {
			addCriterion("`uid` in", values, "uid");
			return (Criteria) this;
		}

		public Criteria andUidNotIn(List<Integer> values) {
			addCriterion("`uid` not in", values, "uid");
			return (Criteria) this;
		}

		public Criteria andUidBetween(Integer value1, Integer value2) {
			addCriterion("`uid` between", value1, value2, "uid");
			return (Criteria) this;
		}

		public Criteria andUidNotBetween(Integer value1, Integer value2) {
			addCriterion("`uid` not between", value1, value2, "uid");
			return (Criteria) this;
		}

		public Criteria andAccountIdIsNull() {
			addCriterion("account_id is null");
			return (Criteria) this;
		}

		public Criteria andAccountIdIsNotNull() {
			addCriterion("account_id is not null");
			return (Criteria) this;
		}

		public Criteria andAccountIdEqualTo(String value) {
			addCriterion("account_id =", value, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("account_id = ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andAccountIdNotEqualTo(String value) {
			addCriterion("account_id <>", value, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdNotEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("account_id <> ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andAccountIdGreaterThan(String value) {
			addCriterion("account_id >", value, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdGreaterThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("account_id > ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andAccountIdGreaterThanOrEqualTo(String value) {
			addCriterion("account_id >=", value, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdGreaterThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("account_id >= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andAccountIdLessThan(String value) {
			addCriterion("account_id <", value, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdLessThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("account_id < ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andAccountIdLessThanOrEqualTo(String value) {
			addCriterion("account_id <=", value, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdLessThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("account_id <= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andAccountIdLike(String value) {
			addCriterion("account_id like", value, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdNotLike(String value) {
			addCriterion("account_id not like", value, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdIn(List<String> values) {
			addCriterion("account_id in", values, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdNotIn(List<String> values) {
			addCriterion("account_id not in", values, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdBetween(String value1, String value2) {
			addCriterion("account_id between", value1, value2, "accountId");
			return (Criteria) this;
		}

		public Criteria andAccountIdNotBetween(String value1, String value2) {
			addCriterion("account_id not between", value1, value2, "accountId");
			return (Criteria) this;
		}

		public Criteria andBalanceIsNull() {
			addCriterion("balance is null");
			return (Criteria) this;
		}

		public Criteria andBalanceIsNotNull() {
			addCriterion("balance is not null");
			return (Criteria) this;
		}

		public Criteria andBalanceEqualTo(Long value) {
			addCriterion("balance =", value, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("balance = ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andBalanceNotEqualTo(Long value) {
			addCriterion("balance <>", value, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceNotEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("balance <> ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andBalanceGreaterThan(Long value) {
			addCriterion("balance >", value, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceGreaterThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("balance > ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andBalanceGreaterThanOrEqualTo(Long value) {
			addCriterion("balance >=", value, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceGreaterThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("balance >= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andBalanceLessThan(Long value) {
			addCriterion("balance <", value, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceLessThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("balance < ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andBalanceLessThanOrEqualTo(Long value) {
			addCriterion("balance <=", value, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceLessThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("balance <= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andBalanceIn(List<Long> values) {
			addCriterion("balance in", values, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceNotIn(List<Long> values) {
			addCriterion("balance not in", values, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceBetween(Long value1, Long value2) {
			addCriterion("balance between", value1, value2, "balance");
			return (Criteria) this;
		}

		public Criteria andBalanceNotBetween(Long value1, Long value2) {
			addCriterion("balance not between", value1, value2, "balance");
			return (Criteria) this;
		}

		public Criteria andFrozenIsNull() {
			addCriterion("frozen is null");
			return (Criteria) this;
		}

		public Criteria andFrozenIsNotNull() {
			addCriterion("frozen is not null");
			return (Criteria) this;
		}

		public Criteria andFrozenEqualTo(Long value) {
			addCriterion("frozen =", value, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("frozen = ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andFrozenNotEqualTo(Long value) {
			addCriterion("frozen <>", value, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenNotEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("frozen <> ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andFrozenGreaterThan(Long value) {
			addCriterion("frozen >", value, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenGreaterThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("frozen > ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andFrozenGreaterThanOrEqualTo(Long value) {
			addCriterion("frozen >=", value, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenGreaterThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("frozen >= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andFrozenLessThan(Long value) {
			addCriterion("frozen <", value, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenLessThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("frozen < ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andFrozenLessThanOrEqualTo(Long value) {
			addCriterion("frozen <=", value, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenLessThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("frozen <= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andFrozenIn(List<Long> values) {
			addCriterion("frozen in", values, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenNotIn(List<Long> values) {
			addCriterion("frozen not in", values, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenBetween(Long value1, Long value2) {
			addCriterion("frozen between", value1, value2, "frozen");
			return (Criteria) this;
		}

		public Criteria andFrozenNotBetween(Long value1, Long value2) {
			addCriterion("frozen not between", value1, value2, "frozen");
			return (Criteria) this;
		}

		public Criteria andMaxIdIsNull() {
			addCriterion("max_id is null");
			return (Criteria) this;
		}

		public Criteria andMaxIdIsNotNull() {
			addCriterion("max_id is not null");
			return (Criteria) this;
		}

		public Criteria andMaxIdEqualTo(Long value) {
			addCriterion("max_id =", value, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("max_id = ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andMaxIdNotEqualTo(Long value) {
			addCriterion("max_id <>", value, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdNotEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("max_id <> ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andMaxIdGreaterThan(Long value) {
			addCriterion("max_id >", value, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdGreaterThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("max_id > ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andMaxIdGreaterThanOrEqualTo(Long value) {
			addCriterion("max_id >=", value, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdGreaterThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("max_id >= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andMaxIdLessThan(Long value) {
			addCriterion("max_id <", value, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdLessThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("max_id < ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andMaxIdLessThanOrEqualTo(Long value) {
			addCriterion("max_id <=", value, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdLessThanOrEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("max_id <= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andMaxIdIn(List<Long> values) {
			addCriterion("max_id in", values, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdNotIn(List<Long> values) {
			addCriterion("max_id not in", values, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdBetween(Long value1, Long value2) {
			addCriterion("max_id between", value1, value2, "maxId");
			return (Criteria) this;
		}

		public Criteria andMaxIdNotBetween(Long value1, Long value2) {
			addCriterion("max_id not between", value1, value2, "maxId");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeIsNull() {
			addCriterion("update_time is null");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeIsNotNull() {
			addCriterion("update_time is not null");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeEqualTo(Long value) {
			addCriterion("update_time =", value, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("update_time = ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUpdateTimeNotEqualTo(Long value) {
			addCriterion("update_time <>", value, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeNotEqualToColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("update_time <> ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUpdateTimeGreaterThan(Long value) {
			addCriterion("update_time >", value, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeGreaterThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("update_time > ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUpdateTimeGreaterThanOrEqualTo(Long value) {
			addCriterion("update_time >=", value, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeGreaterThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("update_time >= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUpdateTimeLessThan(Long value) {
			addCriterion("update_time <", value, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeLessThanColumn(BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("update_time < ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUpdateTimeLessThanOrEqualTo(Long value) {
			addCriterion("update_time <=", value, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeLessThanOrEqualToColumn(
				BalanceCheckpoint.Column column) {
			addCriterion(new StringBuilder("update_time <= ")
					.append(column.getEscapedColumnName()).toString());
			return (Criteria) this;
		}

		public Criteria andUpdateTimeIn(List<Long> values) {
			addCriterion("update_time in", values, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeNotIn(List<Long> values) {
			addCriterion("update_time not in", values, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeBetween(Long value1, Long value2) {
			addCriterion("update_time between", value1, value2, "updateTime");
			return (Criteria) this;
		}

		public Criteria andUpdateTimeNotBetween(Long value1, Long value2) {
			addCriterion("update_time not between", value1, value2, "updateTime");
			return (Criteria) this;
		}

	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated do_not_delete_during_merge
	 */
	public static class Criteria extends GeneratedCriteria {

		/**
		 * This field was generated by MyBatis Generator. This field corresponds to the
		 * database table balance_checkpoint
		 *
		 * @mbg.generated
		 */
		private BalanceCheckpointExample example;

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table balance_checkpoint
		 *
		 * @mbg.generated
		 */
		protected Criteria(BalanceCheckpointExample example) {
			super();
			this.example = example;
		}

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table balance_checkpoint
		 *
		 * @mbg.generated
		 */
		public BalanceCheckpointExample example() {
			return this.example;
		}

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table balance_checkpoint
		 *
		 * @mbg.generated
		 */
		@Deprecated
		public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
			if (ifAdd) {
				add.add(this);
			}
			return this;
		}

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table balance_checkpoint
		 *
		 * @mbg.generated
		 */
		public Criteria when(boolean condition, ICriteriaWhen then) {
			if (condition) {
				then.criteria(this);
			}
			return this;
		}

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table balance_checkpoint
		 *
		 * @mbg.generated
		 */
		public Criteria when(boolean condition, ICriteriaWhen then,
				ICriteriaWhen otherwise) {
			if (condition) {
				then.criteria(this);
			}
			else {
				otherwise.criteria(this);
			}
			return this;
		}

		@Deprecated
		public interface ICriteriaAdd {

			/**
			 * This method was generated by MyBatis Generator. This method corresponds to
			 * the database table balance_checkpoint
			 *
			 * @mbg.generated
			 */
			Criteria add(Criteria add);

		}

	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the
	 * database table balance_checkpoint
	 *
	 * @mbg.generated
	 */
	public static class Criterion {

		private String condition;

		private Object value;

		private Object secondValue;

		private boolean noValue;

		private boolean singleValue;

		private boolean betweenValue;

		private boolean listValue;

		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			}
			else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue,
				String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}

	}

	public interface ICriteriaWhen {

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table balance_checkpoint
		 *
		 * @mbg.generated
		 */
		void criteria(Criteria criteria);

	}

	public interface IExampleWhen {

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table balance_checkpoint
		 *
		 * @mbg.generated
		 */
		void example(com.little.g.springcloud.pay.model.BalanceCheckpointExample example);

	}

}
