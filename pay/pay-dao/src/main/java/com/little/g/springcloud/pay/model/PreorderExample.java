package com.little.g.springcloud.pay.model;

import java.util.ArrayList;
import java.util.List;

public class PreorderExample {

    /**
     * This field was generated by MyBatis Generator. This field corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator. This field corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator. This field corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public PreorderExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public PreorderExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public PreorderExample orderBy(String... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        PreorderExample example = new PreorderExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public PreorderExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public PreorderExample when(boolean condition, IExampleWhen then,
                                IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {

        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2,
                                    String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException(
                        "Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andMchIdIsNull() {
            addCriterion("mch_id is null");
            return (Criteria) this;
        }

        public Criteria andMchIdIsNotNull() {
            addCriterion("mch_id is not null");
            return (Criteria) this;
        }

        public Criteria andMchIdEqualTo(String value) {
            addCriterion("mch_id =", value, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("mch_id = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMchIdNotEqualTo(String value) {
            addCriterion("mch_id <>", value, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("mch_id <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMchIdGreaterThan(String value) {
            addCriterion("mch_id >", value, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("mch_id > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMchIdGreaterThanOrEqualTo(String value) {
            addCriterion("mch_id >=", value, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("mch_id >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMchIdLessThan(String value) {
            addCriterion("mch_id <", value, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("mch_id < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMchIdLessThanOrEqualTo(String value) {
            addCriterion("mch_id <=", value, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("mch_id <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMchIdLike(String value) {
            addCriterion("mch_id like", value, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdNotLike(String value) {
            addCriterion("mch_id not like", value, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdIn(List<String> values) {
            addCriterion("mch_id in", values, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdNotIn(List<String> values) {
            addCriterion("mch_id not in", values, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdBetween(String value1, String value2) {
            addCriterion("mch_id between", value1, value2, "mchId");
            return (Criteria) this;
        }

        public Criteria andMchIdNotBetween(String value1, String value2) {
            addCriterion("mch_id not between", value1, value2, "mchId");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoIsNull() {
            addCriterion("pre_order_no is null");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoIsNotNull() {
            addCriterion("pre_order_no is not null");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoEqualTo(String value) {
            addCriterion("pre_order_no =", value, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pre_order_no = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPreOrderNoNotEqualTo(String value) {
            addCriterion("pre_order_no <>", value, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pre_order_no <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPreOrderNoGreaterThan(String value) {
            addCriterion("pre_order_no >", value, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pre_order_no > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPreOrderNoGreaterThanOrEqualTo(String value) {
            addCriterion("pre_order_no >=", value, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pre_order_no >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPreOrderNoLessThan(String value) {
            addCriterion("pre_order_no <", value, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pre_order_no < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPreOrderNoLessThanOrEqualTo(String value) {
            addCriterion("pre_order_no <=", value, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pre_order_no <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPreOrderNoLike(String value) {
            addCriterion("pre_order_no like", value, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoNotLike(String value) {
            addCriterion("pre_order_no not like", value, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoIn(List<String> values) {
            addCriterion("pre_order_no in", values, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoNotIn(List<String> values) {
            addCriterion("pre_order_no not in", values, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoBetween(String value1, String value2) {
            addCriterion("pre_order_no between", value1, value2, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andPreOrderNoNotBetween(String value1, String value2) {
            addCriterion("pre_order_no not between", value1, value2, "preOrderNo");
            return (Criteria) this;
        }

        public Criteria andAttachIsNull() {
            addCriterion("attach is null");
            return (Criteria) this;
        }

        public Criteria andAttachIsNotNull() {
            addCriterion("attach is not null");
            return (Criteria) this;
        }

        public Criteria andAttachEqualTo(String value) {
            addCriterion("attach =", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("attach = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAttachNotEqualTo(String value) {
            addCriterion("attach <>", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("attach <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAttachGreaterThan(String value) {
            addCriterion("attach >", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("attach > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAttachGreaterThanOrEqualTo(String value) {
            addCriterion("attach >=", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("attach >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAttachLessThan(String value) {
            addCriterion("attach <", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("attach < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAttachLessThanOrEqualTo(String value) {
            addCriterion("attach <=", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("attach <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAttachLike(String value) {
            addCriterion("attach like", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachNotLike(String value) {
            addCriterion("attach not like", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachIn(List<String> values) {
            addCriterion("attach in", values, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachNotIn(List<String> values) {
            addCriterion("attach not in", values, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachBetween(String value1, String value2) {
            addCriterion("attach between", value1, value2, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachNotBetween(String value1, String value2) {
            addCriterion("attach not between", value1, value2, "attach");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoIsNull() {
            addCriterion("out_trade_no is null");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoIsNotNull() {
            addCriterion("out_trade_no is not null");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoEqualTo(String value) {
            addCriterion("out_trade_no =", value, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("out_trade_no = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOutTradeNoNotEqualTo(String value) {
            addCriterion("out_trade_no <>", value, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("out_trade_no <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOutTradeNoGreaterThan(String value) {
            addCriterion("out_trade_no >", value, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("out_trade_no > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOutTradeNoGreaterThanOrEqualTo(String value) {
            addCriterion("out_trade_no >=", value, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("out_trade_no >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOutTradeNoLessThan(String value) {
            addCriterion("out_trade_no <", value, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("out_trade_no < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOutTradeNoLessThanOrEqualTo(String value) {
            addCriterion("out_trade_no <=", value, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("out_trade_no <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOutTradeNoLike(String value) {
            addCriterion("out_trade_no like", value, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoNotLike(String value) {
            addCriterion("out_trade_no not like", value, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoIn(List<String> values) {
            addCriterion("out_trade_no in", values, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoNotIn(List<String> values) {
            addCriterion("out_trade_no not in", values, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoBetween(String value1, String value2) {
            addCriterion("out_trade_no between", value1, value2, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andOutTradeNoNotBetween(String value1, String value2) {
            addCriterion("out_trade_no not between", value1, value2, "outTradeNo");
            return (Criteria) this;
        }

        public Criteria andTotalFeeIsNull() {
            addCriterion("total_fee is null");
            return (Criteria) this;
        }

        public Criteria andTotalFeeIsNotNull() {
            addCriterion("total_fee is not null");
            return (Criteria) this;
        }

        public Criteria andTotalFeeEqualTo(Long value) {
            addCriterion("total_fee =", value, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("total_fee = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalFeeNotEqualTo(Long value) {
            addCriterion("total_fee <>", value, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("total_fee <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalFeeGreaterThan(Long value) {
            addCriterion("total_fee >", value, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("total_fee > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalFeeGreaterThanOrEqualTo(Long value) {
            addCriterion("total_fee >=", value, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("total_fee >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalFeeLessThan(Long value) {
            addCriterion("total_fee <", value, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("total_fee < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalFeeLessThanOrEqualTo(Long value) {
            addCriterion("total_fee <=", value, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("total_fee <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTotalFeeIn(List<Long> values) {
            addCriterion("total_fee in", values, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeNotIn(List<Long> values) {
            addCriterion("total_fee not in", values, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeBetween(Long value1, Long value2) {
            addCriterion("total_fee between", value1, value2, "totalFee");
            return (Criteria) this;
        }

        public Criteria andTotalFeeNotBetween(Long value1, Long value2) {
            addCriterion("total_fee not between", value1, value2, "totalFee");
            return (Criteria) this;
        }

        public Criteria andAccountIdIsNull() {
            addCriterion("account_id is null");
            return (Criteria) this;
        }

        public Criteria andAccountIdIsNotNull() {
            addCriterion("account_id is not null");
            return (Criteria) this;
        }

        public Criteria andAccountIdEqualTo(Integer value) {
            addCriterion("account_id =", value, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("account_id = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAccountIdNotEqualTo(Integer value) {
            addCriterion("account_id <>", value, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("account_id <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAccountIdGreaterThan(Integer value) {
            addCriterion("account_id >", value, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("account_id > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAccountIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("account_id >=", value, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("account_id >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAccountIdLessThan(Integer value) {
            addCriterion("account_id <", value, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("account_id < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAccountIdLessThanOrEqualTo(Integer value) {
            addCriterion("account_id <=", value, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("account_id <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAccountIdIn(List<Integer> values) {
            addCriterion("account_id in", values, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdNotIn(List<Integer> values) {
            addCriterion("account_id not in", values, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdBetween(Integer value1, Integer value2) {
            addCriterion("account_id between", value1, value2, "accountId");
            return (Criteria) this;
        }

        public Criteria andAccountIdNotBetween(Integer value1, Integer value2) {
            addCriterion("account_id not between", value1, value2, "accountId");
            return (Criteria) this;
        }

        public Criteria andOppositAccountIsNull() {
            addCriterion("opposit_account is null");
            return (Criteria) this;
        }

        public Criteria andOppositAccountIsNotNull() {
            addCriterion("opposit_account is not null");
            return (Criteria) this;
        }

        public Criteria andOppositAccountEqualTo(Integer value) {
            addCriterion("opposit_account =", value, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("opposit_account = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOppositAccountNotEqualTo(Integer value) {
            addCriterion("opposit_account <>", value, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("opposit_account <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOppositAccountGreaterThan(Integer value) {
            addCriterion("opposit_account >", value, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("opposit_account > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOppositAccountGreaterThanOrEqualTo(Integer value) {
            addCriterion("opposit_account >=", value, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountGreaterThanOrEqualToColumn(
                Preorder.Column column) {
            addCriterion(new StringBuilder("opposit_account >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOppositAccountLessThan(Integer value) {
            addCriterion("opposit_account <", value, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("opposit_account < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOppositAccountLessThanOrEqualTo(Integer value) {
            addCriterion("opposit_account <=", value, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("opposit_account <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andOppositAccountIn(List<Integer> values) {
            addCriterion("opposit_account in", values, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountNotIn(List<Integer> values) {
            addCriterion("opposit_account not in", values, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountBetween(Integer value1, Integer value2) {
            addCriterion("opposit_account between", value1, value2, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andOppositAccountNotBetween(Integer value1, Integer value2) {
            addCriterion("opposit_account not between", value1, value2, "oppositAccount");
            return (Criteria) this;
        }

        public Criteria andTradeTypeIsNull() {
            addCriterion("trade_type is null");
            return (Criteria) this;
        }

        public Criteria andTradeTypeIsNotNull() {
            addCriterion("trade_type is not null");
            return (Criteria) this;
        }

        public Criteria andTradeTypeEqualTo(String value) {
            addCriterion("trade_type =", value, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("trade_type = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTradeTypeNotEqualTo(String value) {
            addCriterion("trade_type <>", value, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("trade_type <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTradeTypeGreaterThan(String value) {
            addCriterion("trade_type >", value, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("trade_type > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTradeTypeGreaterThanOrEqualTo(String value) {
            addCriterion("trade_type >=", value, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("trade_type >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTradeTypeLessThan(String value) {
            addCriterion("trade_type <", value, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("trade_type < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTradeTypeLessThanOrEqualTo(String value) {
            addCriterion("trade_type <=", value, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("trade_type <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andTradeTypeLike(String value) {
            addCriterion("trade_type like", value, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeNotLike(String value) {
            addCriterion("trade_type not like", value, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeIn(List<String> values) {
            addCriterion("trade_type in", values, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeNotIn(List<String> values) {
            addCriterion("trade_type not in", values, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeBetween(String value1, String value2) {
            addCriterion("trade_type between", value1, value2, "tradeType");
            return (Criteria) this;
        }

        public Criteria andTradeTypeNotBetween(String value1, String value2) {
            addCriterion("trade_type not between", value1, value2, "tradeType");
            return (Criteria) this;
        }

        public Criteria andBtypeIsNull() {
            addCriterion("btype is null");
            return (Criteria) this;
        }

        public Criteria andBtypeIsNotNull() {
            addCriterion("btype is not null");
            return (Criteria) this;
        }

        public Criteria andBtypeEqualTo(Byte value) {
            addCriterion("btype =", value, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("btype = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBtypeNotEqualTo(Byte value) {
            addCriterion("btype <>", value, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("btype <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBtypeGreaterThan(Byte value) {
            addCriterion("btype >", value, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("btype > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBtypeGreaterThanOrEqualTo(Byte value) {
            addCriterion("btype >=", value, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("btype >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBtypeLessThan(Byte value) {
            addCriterion("btype <", value, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("btype < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBtypeLessThanOrEqualTo(Byte value) {
            addCriterion("btype <=", value, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("btype <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andBtypeIn(List<Byte> values) {
            addCriterion("btype in", values, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeNotIn(List<Byte> values) {
            addCriterion("btype not in", values, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeBetween(Byte value1, Byte value2) {
            addCriterion("btype between", value1, value2, "btype");
            return (Criteria) this;
        }

        public Criteria andBtypeNotBetween(Byte value1, Byte value2) {
            addCriterion("btype not between", value1, value2, "btype");
            return (Criteria) this;
        }

        public Criteria andStatusIsNull() {
            addCriterion("`status` is null");
            return (Criteria) this;
        }

        public Criteria andStatusIsNotNull() {
            addCriterion("`status` is not null");
            return (Criteria) this;
        }

        public Criteria andStatusEqualTo(Byte value) {
            addCriterion("`status` =", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("`status` = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualTo(Byte value) {
            addCriterion("`status` <>", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("`status` <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThan(Byte value) {
            addCriterion("`status` >", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("`status` > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualTo(Byte value) {
            addCriterion("`status` >=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("`status` >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusLessThan(Byte value) {
            addCriterion("`status` <", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("`status` < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualTo(Byte value) {
            addCriterion("`status` <=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("`status` <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusIn(List<Byte> values) {
            addCriterion("`status` in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotIn(List<Byte> values) {
            addCriterion("`status` not in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusBetween(Byte value1, Byte value2) {
            addCriterion("`status` between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotBetween(Byte value1, Byte value2) {
            addCriterion("`status` not between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlIsNull() {
            addCriterion("notify_url is null");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlIsNotNull() {
            addCriterion("notify_url is not null");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlEqualTo(String value) {
            addCriterion("notify_url =", value, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("notify_url = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNotifyUrlNotEqualTo(String value) {
            addCriterion("notify_url <>", value, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("notify_url <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNotifyUrlGreaterThan(String value) {
            addCriterion("notify_url >", value, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("notify_url > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNotifyUrlGreaterThanOrEqualTo(String value) {
            addCriterion("notify_url >=", value, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("notify_url >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNotifyUrlLessThan(String value) {
            addCriterion("notify_url <", value, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("notify_url < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNotifyUrlLessThanOrEqualTo(String value) {
            addCriterion("notify_url <=", value, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("notify_url <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNotifyUrlLike(String value) {
            addCriterion("notify_url like", value, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlNotLike(String value) {
            addCriterion("notify_url not like", value, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlIn(List<String> values) {
            addCriterion("notify_url in", values, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlNotIn(List<String> values) {
            addCriterion("notify_url not in", values, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlBetween(String value1, String value2) {
            addCriterion("notify_url between", value1, value2, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andNotifyUrlNotBetween(String value1, String value2) {
            addCriterion("notify_url not between", value1, value2, "notifyUrl");
            return (Criteria) this;
        }

        public Criteria andSubjectIsNull() {
            addCriterion("subject is null");
            return (Criteria) this;
        }

        public Criteria andSubjectIsNotNull() {
            addCriterion("subject is not null");
            return (Criteria) this;
        }

        public Criteria andSubjectEqualTo(String value) {
            addCriterion("subject =", value, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("subject = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubjectNotEqualTo(String value) {
            addCriterion("subject <>", value, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("subject <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubjectGreaterThan(String value) {
            addCriterion("subject >", value, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("subject > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubjectGreaterThanOrEqualTo(String value) {
            addCriterion("subject >=", value, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("subject >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubjectLessThan(String value) {
            addCriterion("subject <", value, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("subject < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubjectLessThanOrEqualTo(String value) {
            addCriterion("subject <=", value, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("subject <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSubjectLike(String value) {
            addCriterion("subject like", value, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectNotLike(String value) {
            addCriterion("subject not like", value, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectIn(List<String> values) {
            addCriterion("subject in", values, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectNotIn(List<String> values) {
            addCriterion("subject not in", values, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectBetween(String value1, String value2) {
            addCriterion("subject between", value1, value2, "subject");
            return (Criteria) this;
        }

        public Criteria andSubjectNotBetween(String value1, String value2) {
            addCriterion("subject not between", value1, value2, "subject");
            return (Criteria) this;
        }

        public Criteria andPayTypeIsNull() {
            addCriterion("pay_type is null");
            return (Criteria) this;
        }

        public Criteria andPayTypeIsNotNull() {
            addCriterion("pay_type is not null");
            return (Criteria) this;
        }

        public Criteria andPayTypeEqualTo(String value) {
            addCriterion("pay_type =", value, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pay_type = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPayTypeNotEqualTo(String value) {
            addCriterion("pay_type <>", value, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pay_type <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPayTypeGreaterThan(String value) {
            addCriterion("pay_type >", value, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pay_type > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPayTypeGreaterThanOrEqualTo(String value) {
            addCriterion("pay_type >=", value, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pay_type >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPayTypeLessThan(String value) {
            addCriterion("pay_type <", value, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pay_type < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPayTypeLessThanOrEqualTo(String value) {
            addCriterion("pay_type <=", value, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("pay_type <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andPayTypeLike(String value) {
            addCriterion("pay_type like", value, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeNotLike(String value) {
            addCriterion("pay_type not like", value, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeIn(List<String> values) {
            addCriterion("pay_type in", values, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeNotIn(List<String> values) {
            addCriterion("pay_type not in", values, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeBetween(String value1, String value2) {
            addCriterion("pay_type between", value1, value2, "payType");
            return (Criteria) this;
        }

        public Criteria andPayTypeNotBetween(String value1, String value2) {
            addCriterion("pay_type not between", value1, value2, "payType");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("create_time is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("create_time is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(Long value) {
            addCriterion("create_time =", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("create_time = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(Long value) {
            addCriterion("create_time <>", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("create_time <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(Long value) {
            addCriterion("create_time >", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("create_time > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(Long value) {
            addCriterion("create_time >=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("create_time >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(Long value) {
            addCriterion("create_time <", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("create_time < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(Long value) {
            addCriterion("create_time <=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("create_time <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<Long> values) {
            addCriterion("create_time in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<Long> values) {
            addCriterion("create_time not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(Long value1, Long value2) {
            addCriterion("create_time between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(Long value1, Long value2) {
            addCriterion("create_time not between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNull() {
            addCriterion("update_time is null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNotNull() {
            addCriterion("update_time is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualTo(Long value) {
            addCriterion("update_time =", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("update_time = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualTo(Long value) {
            addCriterion("update_time <>", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("update_time <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThan(Long value) {
            addCriterion("update_time >", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("update_time > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualTo(Long value) {
            addCriterion("update_time >=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("update_time >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThan(Long value) {
            addCriterion("update_time <", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("update_time < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualTo(Long value) {
            addCriterion("update_time <=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualToColumn(Preorder.Column column) {
            addCriterion(new StringBuilder("update_time <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIn(List<Long> values) {
            addCriterion("update_time in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotIn(List<Long> values) {
            addCriterion("update_time not in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeBetween(Long value1, Long value2) {
            addCriterion("update_time between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotBetween(Long value1, Long value2) {
            addCriterion("update_time not between", value1, value2, "updateTime");
            return (Criteria) this;
        }

    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the
     * database table preorder
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        /**
         * This field was generated by MyBatis Generator. This field corresponds to the
         * database table preorder
         *
         * @mbg.generated
         */
        private PreorderExample example;

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table preorder
         *
         * @mbg.generated
         */
        protected Criteria(PreorderExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table preorder
         *
         * @mbg.generated
         */
        public PreorderExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table preorder
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table preorder
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table preorder
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then,
                             ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {

            /**
             * This method was generated by MyBatis Generator. This method corresponds to
             * the database table preorder
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);

        }

    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the
     * database table preorder
     *
     * @mbg.generated
     */
    public static class Criterion {

        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue,
                            String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }

    }

    public interface ICriteriaWhen {

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table preorder
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);

    }

    public interface IExampleWhen {

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table preorder
		 *
		 * @mbg.generated
		 */
		void example(com.little.g.springcloud.pay.model.PreorderExample example);

	}

}
