package com.little.g.springcloud.pay.model;

import java.util.ArrayList;
import java.util.List;

public class UserAccountExample {

    /**
     * This field was generated by MyBatis Generator. This field corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator. This field corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator. This field corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public UserAccountExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public UserAccountExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public UserAccountExample orderBy(String... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        UserAccountExample example = new UserAccountExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public UserAccountExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public UserAccountExample when(boolean condition, IExampleWhen then,
                                   IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {

        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2,
                                    String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException(
                        "Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andUidIsNull() {
            addCriterion("`uid` is null");
            return (Criteria) this;
        }

        public Criteria andUidIsNotNull() {
            addCriterion("`uid` is not null");
            return (Criteria) this;
        }

        public Criteria andUidEqualTo(Integer value) {
            addCriterion("`uid` =", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`uid` = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUidNotEqualTo(Integer value) {
            addCriterion("`uid` <>", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`uid` <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUidGreaterThan(Integer value) {
            addCriterion("`uid` >", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`uid` > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUidGreaterThanOrEqualTo(Integer value) {
            addCriterion("`uid` >=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`uid` >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUidLessThan(Integer value) {
            addCriterion("`uid` <", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`uid` < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUidLessThanOrEqualTo(Integer value) {
            addCriterion("`uid` <=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`uid` <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUidIn(List<Integer> values) {
            addCriterion("`uid` in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotIn(List<Integer> values) {
            addCriterion("`uid` not in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidBetween(Integer value1, Integer value2) {
            addCriterion("`uid` between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotBetween(Integer value1, Integer value2) {
            addCriterion("`uid` not between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andMoneyIsNull() {
            addCriterion("money is null");
            return (Criteria) this;
        }

        public Criteria andMoneyIsNotNull() {
            addCriterion("money is not null");
            return (Criteria) this;
        }

        public Criteria andMoneyEqualTo(Long value) {
            addCriterion("money =", value, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("money = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMoneyNotEqualTo(Long value) {
            addCriterion("money <>", value, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyNotEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("money <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMoneyGreaterThan(Long value) {
            addCriterion("money >", value, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyGreaterThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("money > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMoneyGreaterThanOrEqualTo(Long value) {
            addCriterion("money >=", value, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyGreaterThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("money >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMoneyLessThan(Long value) {
            addCriterion("money <", value, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyLessThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("money < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMoneyLessThanOrEqualTo(Long value) {
            addCriterion("money <=", value, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyLessThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("money <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andMoneyIn(List<Long> values) {
            addCriterion("money in", values, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyNotIn(List<Long> values) {
            addCriterion("money not in", values, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyBetween(Long value1, Long value2) {
            addCriterion("money between", value1, value2, "money");
            return (Criteria) this;
        }

        public Criteria andMoneyNotBetween(Long value1, Long value2) {
            addCriterion("money not between", value1, value2, "money");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyIsNull() {
            addCriterion("frozon_money is null");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyIsNotNull() {
            addCriterion("frozon_money is not null");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyEqualTo(Long value) {
            addCriterion("frozon_money =", value, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("frozon_money = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyNotEqualTo(Long value) {
            addCriterion("frozon_money <>", value, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyNotEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("frozon_money <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyGreaterThan(Long value) {
            addCriterion("frozon_money >", value, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyGreaterThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("frozon_money > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyGreaterThanOrEqualTo(Long value) {
            addCriterion("frozon_money >=", value, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyGreaterThanOrEqualToColumn(
                UserAccount.Column column) {
            addCriterion(new StringBuilder("frozon_money >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyLessThan(Long value) {
            addCriterion("frozon_money <", value, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyLessThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("frozon_money < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyLessThanOrEqualTo(Long value) {
            addCriterion("frozon_money <=", value, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyLessThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("frozon_money <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyIn(List<Long> values) {
            addCriterion("frozon_money in", values, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyNotIn(List<Long> values) {
            addCriterion("frozon_money not in", values, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyBetween(Long value1, Long value2) {
            addCriterion("frozon_money between", value1, value2, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andFrozonMoneyNotBetween(Long value1, Long value2) {
            addCriterion("frozon_money not between", value1, value2, "frozonMoney");
            return (Criteria) this;
        }

        public Criteria andStatusIsNull() {
            addCriterion("`status` is null");
            return (Criteria) this;
        }

        public Criteria andStatusIsNotNull() {
            addCriterion("`status` is not null");
            return (Criteria) this;
        }

        public Criteria andStatusEqualTo(Byte value) {
            addCriterion("`status` =", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`status` = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualTo(Byte value) {
            addCriterion("`status` <>", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`status` <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThan(Byte value) {
            addCriterion("`status` >", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`status` > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualTo(Byte value) {
            addCriterion("`status` >=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`status` >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusLessThan(Byte value) {
            addCriterion("`status` <", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`status` < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualTo(Byte value) {
            addCriterion("`status` <=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("`status` <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStatusIn(List<Byte> values) {
            addCriterion("`status` in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotIn(List<Byte> values) {
            addCriterion("`status` not in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusBetween(Byte value1, Byte value2) {
            addCriterion("`status` between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotBetween(Byte value1, Byte value2) {
            addCriterion("`status` not between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNull() {
            addCriterion("update_time is null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNotNull() {
            addCriterion("update_time is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualTo(Long value) {
            addCriterion("update_time =", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("update_time = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualTo(Long value) {
            addCriterion("update_time <>", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("update_time <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThan(Long value) {
            addCriterion("update_time >", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("update_time > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualTo(Long value) {
            addCriterion("update_time >=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualToColumn(
                UserAccount.Column column) {
            addCriterion(new StringBuilder("update_time >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThan(Long value) {
            addCriterion("update_time <", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("update_time < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualTo(Long value) {
            addCriterion("update_time <=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("update_time <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIn(List<Long> values) {
            addCriterion("update_time in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotIn(List<Long> values) {
            addCriterion("update_time not in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeBetween(Long value1, Long value2) {
            addCriterion("update_time between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotBetween(Long value1, Long value2) {
            addCriterion("update_time not between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("create_time is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("create_time is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(Long value) {
            addCriterion("create_time =", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("create_time = ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(Long value) {
            addCriterion("create_time <>", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("create_time <> ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(Long value) {
            addCriterion("create_time >", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("create_time > ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(Long value) {
            addCriterion("create_time >=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualToColumn(
                UserAccount.Column column) {
            addCriterion(new StringBuilder("create_time >= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(Long value) {
            addCriterion("create_time <", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("create_time < ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(Long value) {
            addCriterion("create_time <=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualToColumn(UserAccount.Column column) {
            addCriterion(new StringBuilder("create_time <= ")
                    .append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<Long> values) {
            addCriterion("create_time in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<Long> values) {
            addCriterion("create_time not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(Long value1, Long value2) {
            addCriterion("create_time between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(Long value1, Long value2) {
            addCriterion("create_time not between", value1, value2, "createTime");
            return (Criteria) this;
        }

    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the
     * database table user_account
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        /**
         * This field was generated by MyBatis Generator. This field corresponds to the
         * database table user_account
         *
         * @mbg.generated
         */
        private UserAccountExample example;

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table user_account
         *
         * @mbg.generated
         */
        protected Criteria(UserAccountExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table user_account
         *
         * @mbg.generated
         */
        public UserAccountExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table user_account
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table user_account
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table user_account
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then,
                             ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {

            /**
             * This method was generated by MyBatis Generator. This method corresponds to
             * the database table user_account
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);

        }

    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the
     * database table user_account
     *
     * @mbg.generated
     */
    public static class Criterion {

        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue,
                            String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }

    }

    public interface ICriteriaWhen {

        /**
         * This method was generated by MyBatis Generator. This method corresponds to the
         * database table user_account
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);

    }

    public interface IExampleWhen {

		/**
		 * This method was generated by MyBatis Generator. This method corresponds to the
		 * database table user_account
		 *
		 * @mbg.generated
		 */
		void example(com.little.g.springcloud.pay.model.UserAccountExample example);

	}

}
